redis-cache:
  auth:
    existingSecret: cache-secret
    ## @param auth.existingSecretPasswordKey Password key to be retrieved from existing secret
    ## NOTE: ignored unless `auth.existingSecret` parameter is set

  master:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: chorde.io/avail
                  operator: In
                  values:
                    - always
cli-relay:
  image:
    pullSecret: ghcr-pull-secret
  auth:
    roleFile: /app/roles.yml
    dbSecret: safezone-db-secrets
    authSecret: safezone-auth-secrets
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: chorde.io/avail
                operator: In
                values:
                  - always

time-server:
  image:
    pullSecret: ghcr-pull-secret
  auth:
    redisSecret: safezone-redis-secrets
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: chorde.io/avail
                operator: In
                values:
                  - always

ingress:
  className: nginx-public
  host: safezone.omh.idv.tw
  dashboard:
    path: /dashboard
  cliRelay:
    path: /cli

# ---------------------------------
# SafeZone is exposed through an Ingress resource, which is a Kubernetes object that manages external access to services within the cluster.
# The Ingress resource allows you to define rules for routing external traffic to the appropriate services based on the request's host and path.
# ----------------------------------
ingress:
  className: traefik  # Ingress class name (e.g., traefik, nginx)
  host: ""  # Host for SafeZone ingress (e.g., safezone.example.com)
  dashboard:
    path: /dashboard  # Path for the dashboard ingress
  cliRelay:
    path: /cli  # Path for the CLI Relay ingress

# ---------------------------------
# cliRelay is a service that acts as a relay for command-line interface (CLI) requests.
# It is designed to work with the SafeZone project and provides a way to interact with the system through CLI commands.
# cliRelay references: https://github.com/rebodutch/SafeZone/blob/staging/tools/cli/README.md
# ---------------------------------
cliRelay:
  image:
    pullSecret: "" # REQUIRED: Name of the Kubernetes Secret for pulling images from ghcr.io 
  service:
    port: 8080  # HTTP port exposed by the CLI Relay service
    logLevel: INFO  # Log level for CLI Relay (DEBUG, INFO, WARNING, ERROR)
  auth:
    # REQUIRED: Name of the Kubernetes Secret containing Google OAuth credentials
    # The secret must include the key `google-oauth-admin-emails`
    # Google OAuth reference: https://developers.google.com/identity/protocols/oauth2/web-server#creatingcred
    authSecret: "" 
    # REQUIRED: Name of the Kubernetes Secret containing database credentials
    # The secret must include the key `db_url` (example: postgres://user:password@host:port/dbname)
    # Database reference: https://www.postgresql.org/docs/current/auth-methods.html
    dbSecret: ""
  affinity: {}  # Optional: Node affinity rules for CLI Relay pods


# -------------------------------
# Redis instance for system control plane (used by CLI Relay, Init Job, etc.)
# Stores low-volume system-level data like phase state, deployment flags
# -------------------------------
redis-sys:
  # Override the full name of the Redis cache instance
  fullnameOverride: "safezone-redis-sys"

  # Customized for this project: standalone Redis without replica
  architecture: standalone
  replica:
    enabled: false

  auth:
    # REQUIRED: Name of the existing Kubernetes Secret containing the Redis password
    # The secret must include the key `redis-password`
    # Reference: https://redis.io/docs/management/security/security-redis-password/
    # If not set, the Bitnami Redis chart will generate a random password automatically
    existingSecret: ""  
  master:
    persistence:
      # Persistent volume for Redis-sys master
      enabled: true
    affinity: {}  # Optional: Node affinity rules for Redis-sys master pods

# -------------------------------
# Redis instance for caching service-layer data (used by APIs, dashboard, etc.)
# Stores high-frequency data such as query results and session cache
# -------------------------------
redis-cache:
   # Override the full name of the Redis cache instance
  fullnameOverride: "safezone-redis-cache" 

  # Customized for this project: standalone Redis without replica
  architecture: standalone
  replica:
    enabled: false

  auth:
    # REQUIRED: Name of the existing Kubernetes Secret containing the Redis password
    # The secret must include the key `redis-password`
    # Reference: https://redis.io/docs/management/security/security-redis-password/
    # If not set, the Bitnami Redis chart will generate a random password automatically
    existingSecret: ""  
  master:
    persistence:
      enabled: false
    affinity: {}  # Optional: Node affinity rules for Redis-cache master pods
# ---------------------------------
# SafeZone is exposed through an Ingress resource, which is a Kubernetes object that manages external access to services within the cluster.
# The Ingress resource allows you to define rules for routing external traffic to the appropriate services based on the request's host and path.
# ----------------------------------
ingress:
  className: ""  # Ingress class name (e.g., traefik, nginx)
  host: ""  # Host for SafeZone ingress (e.g., safezone.example.com)
  dashboard:
    path: /dashboard  # Path for the dashboard ingress
  cli-relay:
    path: /cli  # Path for the CLI Relay ingress

# ---------------------------------
# cli-relay is a service that acts as a relay for command-line interface (CLI) requests.
# It is designed to work with the SafeZone project and provides a way to interact with the system through CLI commands.
# cli-relay references: https://github.com/rebodutch/SafeZone/blob/staging/tools/cli/README.md
# ---------------------------------
cli-relay:
  image:
    pullSecret: "" # REQUIRED: Name of the Kubernetes Secret for pulling images from ghcr.io 
  service:
    port: 8080  # HTTP port exposed by the CLI Relay service
    logLevel: INFO  # Log level for CLI Relay (DEBUG, INFO, WARNING, ERROR)
  auth:
    # REQUIRED: Path to the role file within the container
    # This file defines the roles and permissions for CLI Relay operations
    # Example: /app/roles.example.yml
    roleFile: ""  # Path to the role file (e.g., /app/roles.example.yml)
    # REQUIRED: Name of the Kubernetes Secret containing Google OAuth credentials
    # The secret must include the key `CLIENT_ID`
    # Google OAuth reference: https://developers.google.com/identity/protocols/oauth2/web-server#creatingcred
    authSecret: "" 
    # REQUIRED: Name of the Kubernetes Secret containing database credentials
    # The secret must include the key `db_url` (example: postgres://user:password@host:port/dbname)
    # Database reference: https://www.postgresql.org/docs/current/auth-methods.html
    dbSecret: ""
    # REQUIRED: Name of the Kubernetes Secret containing Redis credentials
    # The secret must include the keys `redis_host`, `redis_port`, and `redis_password`
    # Redis reference: https://redis.io/docs/management/security/security-best-practices/
    redisSecret: ""
    # REQUIRED: Name of the Kubernetes Secret containing cache (Redis) credentials
    # The secret must include the key `cache_password`
    # Cache (Redis) reference: https://redis.io/docs/management/security/security-redis-password/
    cacheSecret: ""
  affinity: {}  # Optional: Node affinity rules for CLI Relay pods

# -------------------------------
# time-server is a service that provides accurate time synchronization for devices within the SafeZone network.
# It is an fastapi server that provides a only way to get system time(maybe mock time) through HTTP API.
# time-server references: https://github.com/rebodutch/SafeZone/tree/main/tools/time-server/README.md
# ---------------------------------
time-server:
  image:
    pullSecret: "" # REQUIRED: Name of the Kubernetes Secret for pulling images from ghcr.io 
  service:
    port: 8000 # HTTP port exposed by the time server service
    logLevel: INFO # Log level for time server (DEBUG, INFO, WARNING, ERROR
  auth:
    redisSecret: "" # REQUIRED: Name of the Kubernetes Secret containing Redis credentials
  affinity: {}  # Optional: Node affinity rules for time server pods

# -------------------------------
# Redis instance for caching service-layer data (used by APIs, dashboard, etc.)
# Stores high-frequency data such as query results and session cache
# -------------------------------
redis-cache:
   # Override the full name of the Redis cache instance
  fullnameOverride: "safezone-redis-cache" 

  # Customized for this project: standalone Redis without replica
  architecture: standalone
  replica:
    enabled: false
  auth:
    # REQUIRED: Name of the existing Kubernetes Secret containing the Redis password
    # The secret must include the key `redis-password`
    # Reference: https://redis.io/docs/management/security/security-redis-password/
    # If not set, the Bitnami Redis chart will generate a random password automatically
    existingSecret: ""  
  master:
    # @param master.persistence.enabled Enable Redis&reg; master persistence using PVC
    persistence:
      enabled: false # only for cache use casesï¼Œ set to false to avoid unnecessary disk usage
    affinity: {}  # Optional: Node affinity rules for Redis-cache master pods
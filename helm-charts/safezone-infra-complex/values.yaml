# -------------------------------
# Redis instance for caching service-layer data (used by APIs, dashboard, etc.)
# Stores high-frequency data such as query results and session cache
# -------------------------------
redis-cache:
   # Override the full name of the Redis cache instance
  fullnameOverride: "safezone-redis-cache" 

  # Customized for this project: standalone Redis without replica
  architecture: standalone
  replica:
    enabled: false
  auth:
    # REQUIRED: Name of the existing Kubernetes Secret containing the Redis password
    # The secret must include the key `redis-password`
    # Reference: https://redis.io/docs/management/security/security-redis-password/
    # If not set, the Bitnami Redis chart will generate a random password automatically
    existingSecret: ""  
  master:
    # @param master.persistence.enabled Enable Redis&reg; master persistence using PVC
    persistence:
      enabled: false # only for cache use casesï¼Œ set to false to avoid unnecessary disk usage
    affinity: {}  # Optional: Node affinity rules for Redis-cache master pods

# ---------------------------------
# SafeZone is exposed through an Ingress resource, which is a Kubernetes object that manages external access to services within the cluster.
# The Ingress resource allows you to define rules for routing external traffic to the appropriate services based on the request's host and path.
# ----------------------------------
ingress:
  className: ""  # Ingress class name (e.g., traefik, nginx)
  host: ""  # Host for SafeZone ingress (e.g., safezone.example.com)
  dashboard:
    path: /dashboard  # Path for the dashboard ingress
  cli-relay:
    path: /cli  # Path for the CLI Relay ingress